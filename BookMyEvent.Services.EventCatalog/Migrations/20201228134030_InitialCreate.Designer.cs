// <auto-generated />
using System;
using BookMyEvent.Services.EventCatalog.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookMyEvent.Services.EventCatalog.Migrations
{
    [DbContext(typeof(EventCatalogDbContext))]
    [Migration("20201228134030_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookMyEvent.Services.EventCatalog.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("85b8eb31-4109-4864-abdd-f855b7975b4b"),
                            Name = "Concerts"
                        },
                        new
                        {
                            CategoryId = new Guid("b23b9719-ea27-4eb3-bb39-7092c11a44bc"),
                            Name = "Musicals"
                        },
                        new
                        {
                            CategoryId = new Guid("c7f58e81-f69e-4991-b8a6-ff5f80a11435"),
                            Name = "Plays"
                        },
                        new
                        {
                            CategoryId = new Guid("5aed2b89-b2f8-4b13-979f-66500fa968cb"),
                            Name = "Movies"
                        });
                });

            modelBuilder.Entity("BookMyEvent.Services.EventCatalog.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("3e1ba46d-d744-48cc-b07a-9ef940f000e0"),
                            Artist = "John Egbert",
                            CategoryId = new Guid("85b8eb31-4109-4864-abdd-f855b7975b4b"),
                            Date = new DateTime(2021, 6, 28, 19, 10, 30, 163, DateTimeKind.Local).AddTicks(4688),
                            Description = "Join John for his farwell tour across 15 continents. John really needs no introduction since he has already mesmerized the world with his banjo.",
                            ImageUrl = "/img/banjo.jpg",
                            Name = "John Egbert Live",
                            Price = 65
                        },
                        new
                        {
                            EventId = new Guid("dd059a8f-05eb-4427-a50f-2aba0d13c1f7"),
                            Artist = "Michael Johnson",
                            CategoryId = new Guid("85b8eb31-4109-4864-abdd-f855b7975b4b"),
                            Date = new DateTime(2021, 9, 28, 19, 10, 30, 165, DateTimeKind.Local).AddTicks(160),
                            Description = "Michael Johnson doesn't need an introduction. His 25 concert across the globe last year were seen by thousands. Can we add you to the list?",
                            ImageUrl = "/img/michael.jpg",
                            Name = "The State of Affairs: Michael Live!",
                            Price = 85
                        },
                        new
                        {
                            EventId = new Guid("47a7881d-84f0-47c1-bf87-fc306d537b99"),
                            Artist = "Nick Sailor",
                            CategoryId = new Guid("b23b9719-ea27-4eb3-bb39-7092c11a44bc"),
                            Date = new DateTime(2021, 8, 28, 19, 10, 30, 165, DateTimeKind.Local).AddTicks(275),
                            Description = "The critics are over the moon and so will you after you've watched this sing and dance extravaganza written by Nick Sailor, the man from 'My dad and sister'.",
                            ImageUrl = "/img/musical.jpg",
                            Name = "To the Moon and Back",
                            Price = 135
                        });
                });

            modelBuilder.Entity("BookMyEvent.Services.EventCatalog.Entities.Event", b =>
                {
                    b.HasOne("BookMyEvent.Services.EventCatalog.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
